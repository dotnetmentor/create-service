#!/usr/bin/env bash

# ---------------------------------------------------
# create-service customizations
# ---------------------------------------------------

declare -a -r cs_modules=('directories' 'editorconfig' 'readme' 'koshu' 'github' 'buildkite' 'docker' 'git')
declare -r cs_debug=false

# ---------------------------------------------------
# create-service internals
# ---------------------------------------------------

# shellcheck disable=SC2034
declare -r cs_color_default=''
# shellcheck disable=SC2034
declare -r cs_color_blue="\033[1;94m"
# shellcheck disable=SC2034
declare -r cs_color_green="\033[1;92m"
# shellcheck disable=SC2034
declare -r cs_color_red="\033[0;91m"
# shellcheck disable=SC2034
declare -r cs_color_yellow="\033[0;93m"
# shellcheck disable=SC2034
declare -r cs_color_reset="\033[0m"

declare cs_config="{}"
declare -a cs_tracked_files=()

pushd "$(dirname $0)" > /dev/null
export CS_CONFIG_DIR="${PWD}"
export CS_MODULES_DIR="${PWD}/modules"
popd > /dev/null

log () {
  local log_color="cs_color_${1}"
  echo -e "${cs_color_reset}${!log_color}${*:2}${cs_color_reset}"
}

# ---------------------------------------------------
# prompt functions
# ---------------------------------------------------

ask_for () {
  local var="$1"
  local prompt="$2"
  local default="$3"
  local answer

  answer="$(echo "${cs_config:?}" | jq -r ".$var")"

  if [[ "$answer" != "" ]] && [[ "$answer" != "null" ]]; then
    if [[ "${cs_debug:?}" == "true" ]]; then
      log_warn "Found value for '$var' in config.json ($answer)"
    fi
  else
    answer=''
  fi

  if [[ "$answer" == "" ]]; then
    if [[ "${default}" == "" ]]; then
      until [[ "${answer}" != "" ]]; do
        echo -n "${prompt} (${default}) : "
        read answer
      done
    elif [[ "${default}" == "yes" ]] || [[ "${default}" == "no" ]]; then
      until [[ "${answer}" == "yes" ]] || [[ "${answer}" == "no" ]]; do
        echo -n "${prompt} (${default}) : "
        read answer
        if [[ "${answer}" == "" ]]; then
          answer="${default}"
        fi
      done
    else
      echo -n "${prompt} (${default}) : "
      read answer
    fi
  fi

  if [ "$answer" != "" ]; then
    set_var "${var}" "${answer}"
  else
    set_var "${var}" "${default}"
  fi
}

set_var () {
  local name="$1"
  local value="$2"
  printf -v "${name}" '%s' "${value}"
}

# ---------------------------------------------------
# module functions
# ---------------------------------------------------

alias log_success="log green [cs] "
alias log_info="log blue [cs] "
alias log_warn="log yellow [cs] "
alias log_error="log red [cs] "

shopt -s expand_aliases

cs_copy () {
  local sourceFile="${1:?'A source file must be given'}"
  local destinationFile="${2:?'A destination file must be given'}"
  cs_tracked_files+=(${destinationFile})
  cp $sourceFile $destinationFile
}

cs_export () {
  local env_var_name="${1:?'A name must be given'}"
  local env_var_value="${2:-<computed>}"
  export $(echo "${env_var_name}")="$(echo "${env_var_value}")"
}

# ---------------------------------------------------
# scaffold:init
# ---------------------------------------------------

scaffold:init () {
  set_var 'service_name' "$1"
  ask_for 'service_dir' "Root directory" "${PWD}/${service_name:?}/"

  if [[ -d ${service_dir:?} ]]; then
    log_warn "${service_name:?} already exists at ${service_dir:?}"
  fi

  mkdir -p "${service_dir:?}"
  cd "${service_dir:?}" || exit

  export CS_SERVICE_NAME="${service_name}"
  export CS_SERVICE_DIR="${service_dir}"
}

# ---------------------------------------------------
# apply:transformations
# ---------------------------------------------------

apply:transformations () {
  for file in "${cs_tracked_files[@]}"; do
    for env_var in $(env | grep CS_); do
      if [[ "$env_var" == "CS_"* ]]; then
        local env_var_name
        env_var_name="$(echo ${env_var}| sed 's/=.*//g')"
        local env_var_value="${!env_var_name}"
        env_var_value="${env_var_value//\//\\/}"
        sed -i -e "s/\${${env_var_name}}/${env_var_value}/g" ${file}
      fi
    done
  done
  cs_tracked_files=()
}

# ---------------------------------------------------
# output:env
# ---------------------------------------------------

output:env () {
  echo
  env | grep CS_ | sort
}

# ---------------------------------------------------
# load:config
# ---------------------------------------------------

load:config () {
  local configFile="${CS_CONFIG_DIR}/config.json"
  if [[ -f $configFile ]]; then
    log_info "Loading config ($configFile)"
    cs_config="$(cat $configFile)"
  fi
}

# ---------------------------------------------------
# main
# ---------------------------------------------------

main () {
  if [[ "${1}" == "" ]]; then
    ask_for service_name 'Enter a name for the service (lowercase, no spaces)'
  else
    service_name="${1}"
  fi

  load:config

  log_info "Generating service '$service_name'..."
  log_info 'Press enter to accept default value when prompted.'
  echo

  local loaded_modules=()

  for module in "${cs_modules[@]}"; do
    local use_variable_name="use_${module}"
    ask_for "${use_variable_name}" "Use module '$module'" 'yes'
    if [[ "${!use_variable_name}" == "yes" ]]; then
      cs_export "CS_USE_$(echo ${module} | tr '[:lower:]' '[:upper:]')" 'true'
      # shellcheck source=src/lib.sh
      source "${CS_MODULES_DIR}/${module}/module.sh"
      loaded_modules+=(${module})
    fi
  done

  scaffold:init "$service_name"

  echo
  log_info 'Checking pre-requisites...'
  for module in "${loaded_modules[@]}"; do
    log_info "# ${module}"
    "${module}:init"
  done

  echo
  log_info 'Applying modules...'
  for module in "${loaded_modules[@]}"; do
    log_info "# ${module}"
    "${module}:exec"
    apply:transformations
  done

  output:env

  log_info "Setup and configured service $service_name"
}

main "$1"
