#!/usr/bin/env bash

# ---------------------------------------------------
# create-service internals
# ---------------------------------------------------

alias log_success="log green [cs] "
alias log_info="log blue [cs] "
alias log_warn="log yellow [cs] "
alias log_error="log red [cs] "

shopt -s expand_aliases

# shellcheck disable=SC2034
declare -r cs_color_default=''
# shellcheck disable=SC2034
declare -r cs_color_blue="\033[1;94m"
# shellcheck disable=SC2034
declare -r cs_color_green="\033[1;92m"
# shellcheck disable=SC2034
declare -r cs_color_red="\033[0;91m"
# shellcheck disable=SC2034
declare -r cs_color_yellow="\033[0;93m"
# shellcheck disable=SC2034
declare -r cs_color_reset="\033[0m"

ask_for () {
  local var="$1"
  local prompt="$2"
  local default="$3"

  echo -n "${prompt} (${default}) : "
  read answer
  if [[ -z $answer ]]; then
    set_var "${var}" "${default}"
  else
    set_var "${var}" "${answer}"
  fi

}

set_var () {
  local name="$1"
  local value="$2"
  printf -v "${name}" '%s' "${value}"
}

log () {
  local log_color="cs_color_${1}"
  echo -e "${cs_color_reset}${!log_color}${*:2}${cs_color_reset}"
}


# ---------------------------------------------------
# Generator functions. Modify as needded.
# ---------------------------------------------------

scaffold:init () {
  set_var 'service_name' "$1"
  ask_for 'service_dir' "Root directory" "${PWD}/${service_name:?}/"

  if [[ -d ${service_dir:?} ]]; then
    log_warn "${service_name:?} already exists at ${service_dir:?}"
  fi

  mkdir -p "${service_dir:?}"
  cd "${service_dir:?}" || exit

  export CS_SERVICE_NAME="${service_name}"
  export CS_SERVICE_DIR="${service_dir}"
}

scaffold:readme () {
  if [[ ! -f README.md ]]; then
    cat <<EOF > README.md
# ${CS_SERVICE_NAME:?}
EOF
    log_success ' - Created a README.md'
  fi
}

scaffold:directories () {
  [[ -d ./src ]] || mkdir "./src"
  [[ -d ./test ]] || mkdir "./test"
  log_success ' - Created directories'
}

scaffold:dotfiles () {
  [[ -f .gitignore ]] || touch .gitignore
  [[ -f .editorconfig ]] || touch .editorconfig
  log_success ' - Created dotfiles'
}

scaffold:taskrunner () {
  if [[ ! -f ./koshu.sh ]]; then
    curl -s https://raw.githubusercontent.com/kristofferahl/koshu-shell/master/src/koshu.sh > ./koshu.sh
    chmod +x ./koshu.sh
    ./koshu.sh init > /dev/null
    log_success ' - Added koshu and koshufile'
  fi
}

scaffold:git:local () {
  if [[ ! -d .git ]]; then
    git init > /dev/null
    git add .
    git commit -am "Created service ${CS_SERVICE_NAME:?}" > /dev/null
    log_success ' - Initialized local git repository'
  fi
}

scaffold:git:github () {
  ask_for useGithub 'Setup Github project' 'yes'

  if [[ "${useGithub:?}" != 'yes' ]]; then
    log_info 'Skipping Github setup...'
  else
    ask_for githubOrganization 'Github organization'
    ask_for githubToken 'Github API token'

    local response
    response=$(curl https://api.github.com/orgs/${githubOrganization:?}/repos \
      -H "Authorization: token ${githubToken:?}" \
      -o /dev/null \
      --write-out "%{http_code}\n" \
      --silent \
      -d "{
            \"name\": \"${CS_SERVICE_NAME:?}\",
            \"private\": true
          }")

    if [[ "$response" == "201" ]]; then
      log_success " - Github project created (https://github.com/${githubOrganization:?}/${CS_SERVICE_NAME:?}/)"

      git remote add origin git@github.com:${githubOrganization:?}/${CS_SERVICE_NAME:?}.git
      log_success " - Added remote 'origin' to git repository (git@github.com:${githubOrganization:?}/${CS_SERVICE_NAME:?}.git)"

      export CS_GITHUB_ORG="${githubOrganization:?}"
    else
      log_error " - Failed to create Github project (HTTP $response)"
      exit 1
    fi
  fi
}

main () {
  local name="${1:?'A service name must be provided'}"

  log_info "Creating service '$name'..."
  log_info 'Press enter to accept default value when prompted.'

  scaffold:init "$name"
  scaffold:readme
  scaffold:directories
  scaffold:dotfiles
  scaffold:taskrunner
  scaffold:git:local
  scaffold:git:github
}

main "$1"
